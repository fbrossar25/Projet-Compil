AXIOM 	-> 	FONCTION 
	    |  	ε

FONCTION -> type id() {ACTION RETOUR}

RETOUR -> return entier;

ACTION 	-> 	DECLARATION ACTION
	    | 	OPERATION ACTION
	    | 	CONDITION ACTION
	    |  	BOUCLE ACTION
	    |  	AFFECTATION ACTION
	    |  	INCREMENTATION ACTION
        |	COMMENTAIRE ACTION
	|	;
	    |  	ε

DECLARATION ->	type id;
		    |  	type AFFECTATION
		    |  	type id[TAILLE];
		    |  	type id[TAILLE] = {LISTE};

AFFECTATION -> 	id = VALEUR;
			|	id = OPERATION;
			|	id[VALEUR] = VALEUR;
			|	id[VALEUR] = OPERATION;

VALEUR	->	entier
		|	id

TAILLE	->	VALEUR
		|	ε

LISTE	->	VALEUR, LISTE
		|	VALEUR

OPERATION	->	EXPRESSION + EXPRESSION
			|	EXPRESSION - EXPRESSION
			|	EXPRESSION * EXPRESSION
			|	EXPRESSION / EXPRESSION
			|	-EXPRESSION
			|	(EXPRESSION)

EXPRESSION	->	VALEUR
			|	OPERATION

CONDITION	->	if(COMPARAISON) {ACTION}
			|	if(COMPARAISON) {ACTION} else {ACTION}

BOUCLE	->	while(COMPARAISON) {ACTION}
		|	do {ACTION} while (COMPARAISON);
		|	for(type AFFECTATION;COMPARAISON;INCREMENTATION) {ACTION}
		|	for(type AFFECTATION;COMPARAISON;OPERATION) {ACTION}

INCREMENTATION	->	id++;
				|	id--;

COMPARAISON	->	COMPARAISON == COMPARAISON
			|	COMPARAISON != COMPARAISON
			|	COMPARAISON <= COMPARAISON
			|	COMPARAISON >= COMPARAISON
			|	COMPARAISON > COMPARAISON
			|	COMPARAISON < COMPARAISON



